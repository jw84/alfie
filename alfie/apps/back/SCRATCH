SCRATCH

total_sum = 0
total_avg = 0
for i in states:
  state = i['ship_state']
  customers = i['customers']
  #bigups http://agiliq.com/blog/2009/08/django-aggregation-tutorial/
  avg = float(Profile.objects.filter(ship_state=state).aggregate(Avg('shipping_rate'))['shipping_rate__avg']) / 100
  sum = float(Profile.objects.filter(ship_state=state).aggregate(Sum('shipping_rate'))['shipping_rate__sum']) / 100
  max = float(Profile.objects.filter(ship_state=state).aggregate(Max('shipping_rate'))['shipping_rate__max']) / 100
  print "State: %s - Customers: %s - Average: $%.2f - Max: $%.2f - Total: $%.2f" % (state, customers, avg, max, sum)
  total_sum += sum
  total_avg += avg
  i['avg'] = round(avg, 2)
  i['sum'] = round(sum, 2)
  i['max'] = round(max, 2)
print "Total sum: $%.2f - Total avg: $%.2f" % (total_sum, (total_avg / len(states)))



profits = []
total_profit = 0 
for i in range(Profile.objects.count()):
  customer = Profile.objects.all()[i]
  order = customer.user.orders.all()[0]
  profit = order.choice.price - order.check_costs()
  box_name = order.choice.name.title()
  print "%s shipped to %s profit: $%.2f" % (box_name, customer.ship_state, (float(profit)/100))
  total_profit += profit

  dict = {}
  dict['user'] = customer.user.id
  dict['name'] = customer.user.first_name + ' ' + customer.user.last_name
  dict['state'] = customer.ship_state
  dict['box'] = box_name
  dict['revenue'] = order.choice.price
  dict['costs'] = order.check_costs()
  dict['profit'] = profit
  profits.append(dict)

print "$%.2f" % (float(total_profit)/100)

#bigups http://stackoverflow.com/questions/72899/in-python-how-do-i-sort-a-list-of-dictionaries-by-values-of-the-dictionary
profits_by_profit = sorted(profits, key=lambda k: k['profit'])
profits_by_state = sorted(profits, key=lambda k: k['state'])



for i in Menu.objects.all():
  orders = Menu.objects.all()[i.id - 1].order_set
  this_month = orders.filter(year=2013).filter(month=2)
  shipped = this_month.filter(shipped__isnull=False)
  unshipped = this_month.filter(shipped__isnull=True)
  to_pack = unshipped.aggregate(Sum('box__slots'))['box__slots__sum']
  packed = shipped.aggregate(Sum('box__slots'))['box__slots__sum']
  print "\n\n%s Details" % (i.name.title())
  print "Shipped this month: %s" % (shipped.count())
  print "List of shipped orders: %s" % (shipped)
  print "Unshipped this month: %s" % (unshipped.count())
  print "List of unshipped orders: %s" % (unshipped)
  print "Ramens to pack: %s" % (to_pack)
  print "Ramens packed: %s" % (packed)

"""
OUTPUT:
  # of box a
  list of ramen, # of each ramen
  # of box b
  list of ramen, # of each ramen
  # of box c
  list of ramen, # of each ramen
"""

boxes = []
for box in Box.objects.this_months_boxes():
  orders = box.order_set
  unpacked = orders.filter(shipped__isnull=True)
  packed = orders.filter(shipped__isnull=False)
  total_ramens = orders.aggregate(Sum('box__slots'))['box__slots__sum']
  print "\n" + str(box)
  for i in range(box.ramens.count()):
    ramen = box.ramens.all()[i]
    cogs = float(ramen.cogs) / 100
    print "%s - $%.2f - %s - (%s/%s)" % (i+1, cogs, ramen, packed.count(), unpacked.count())
  print "Cost of goods: $%.2f - Total COGS: $%.2f - Total ramens: %s" % ((float(box.cost) / 100), (float(box.cost * orders.count()) / 100), total_ramens)

ramen_dict = {
  id: box_id
  slots: box_slots
  month: box_month
  year: box_year
  ramens: [
    {
      id: ramen_id
      name: ramen_name
      cogs: ramen_cogs
      weight: ramen_weight
    }, 
  ]
  total_count: ramens.count
  total_weight: ramens.weight
  total_cost: ramens.cost
}



manifest = []
for i in range(len(zones)):
  dict = {}
  dict['zone'] = i
  dict['orders'] = packed.filter(priority=i).count()
  manifest.append(dict)

